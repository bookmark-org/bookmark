<section style="position: fixed; z-index: 3; top: 0; right: 0; margin-top: 33px; padding-right: 3px; background: yellow">
  <span style="font-size: 13px; color: #1e1e1e; margin-left: 33px; margin-right: 100px;">
    <strong>Donate</strong>
    <%= archive_poster = assigns[:archive_poster]

    archive_poster_user =
      if archive_poster do
        Bookmark.Accounts.get_user_by_username(archive_poster)
      end

    link("⚡1 sat", to: "/pay/" <> to_string(archive_poster_user[:id]) <> "/1") %>
    <%= link("⚡10", to: "/pay/" <> to_string(archive_poster_user[:id]) <> "/10") %>
    <%= link("⚡100", to: "/pay/" <> to_string(archive_poster_user[:id]) <> "/100") %>
  </span>
</section>
<!-- embedded iframe -->
<%= tag(:iframe,
  src: Routes.static_path(@conn, "/archive/archive/" <> @id <> "/" <> @wget_url),
  style: "background: #FFFFFF; position: fixed; left: 0; right: 0; width: 100%; height: 95%"
) %>
<%= tag("/iframe") %>

<span style="position: fixed; bottom: 0; left: 0; right: 0; background: #1e1e1e; text-align: center; padding: 6px; border-top: 1px solid #333">
  <span style="color: white; font-weight: 600; font-size: 21px;"><%= @title %></span>
  <br />
  <span style="color:grey; font-size: 13px; ">
    archived by <%= if assigns[:archive_poster] do
      link(assigns[:archive_poster],
        to: Routes.static_path(@conn, "/@" <> assigns[:archive_poster])
      )
    end %> via <em><%= @domain %></em>
    on <%= @date %>
  </span>
  <%= if @comment != nil do %>
    <div style="border: 0px solid; font-size: 16px; padding: 5px; background-color: #eeeeee">
      <%= @comment %>
    </div>
  <% end %>
  <br />
  <span onclick="copyEvent('copy')" class="url_copy_box" id="copy">
    https://bookmark.org/archive/<%= @id %>
  </span>

  <%= link("PNG",
    to: Routes.static_path(@conn, "/archive/archive/" <> @id <> "/screenshot.png"),
    data: [modal: nil],
    role: :button
  ) %>

  <%= link("PDF",
    to: Routes.static_path(@conn, "/archive/archive/" <> @id <> "/output.pdf"),
    role: :button
  ) %>
</span>

<br />

<svg style="display:none">
  <defs>
    <symbol viewBox="0 0 38 38" id="icon-cross">
      <path d="M19 17.6l5.3-5.4 1.4 1.4-5.3 5.4 5.3 5.3-1.4 1.4-5.3-5.3-5.3 5.3-1.4-1.4 5.2-5.3-5.2-5.3 1.4-1.4 5.3 5.3z" />
    </symbol>
    <symbol viewBox="0 0 150 130" id="icon-loading">
      <title>Loading</title>
      <path d="M81.5 33l30.8-32.8c0.3-0.3 0.5-0.2 0.3 0.3 -1.8 5.2-1.7 15.3-1.7 15.3 -0.1 6.8-0.8 11.7-6.6 17.9L74.8 65.1c-0.2 0.2-0.4 0-0.3-0.2 1.5-5.1 1.2-15.1 1.2-15.1C75.4 45.6 76.4 38.4 81.5 33M105.9 54.8l43.8 10.3c0.4 0.1 0.4 0.4-0.2 0.4 -5.4 1-14.1 6.1-14.1 6.1 -6 3.3-10.5 5.2-18.8 3.2l-41.9-9.9c-0.3-0.1-0.2-0.3 0-0.4 5.2-1.3 13.7-6.5 13.7-6.5C92 55.9 98.7 53.1 105.9 54.8M99.4 86.3l13 43.2c0.1 0.4-0.1 0.5-0.4 0.1 -3.6-4.2-12.4-9.2-12.4-9.2 -5.8-3.5-9.7-6.5-12.2-14.6L75 64.5c-0.1-0.3 0.2-0.4 0.3-0.2 3.7 3.9 12.5 8.6 12.5 8.6C91.5 74.8 97.3 79.2 99.4 86.3M68.7 97l-30.8 32.8c-0.3 0.3-0.5 0.2-0.3-0.3 1.8-5.2 1.7-15.3 1.7-15.3 0.1-6.8 0.8-11.7 6.6-17.9l29.5-31.4c0.2-0.2 0.4 0 0.3 0.2 -1.5 5.1-1.2 15.1-1.2 15.1C74.8 84.4 73.8 91.6 68.7 97M44.1 75.8L0.3 65.4C-0.1 65.3-0.1 65 0.5 65c5.4-1 14.1-6.1 14.1-6.1 6-3.3 10.5-5.2 18.8-3.2l41.9 9.9c0.3 0.1 0.2 0.3 0 0.4 -5.2 1.3-13.7 6.5-13.7 6.5C58.1 74.7 51.3 77.5 44.1 75.8M50.2 43.8l-13-43.2c-0.1-0.4 0.1-0.5 0.4-0.1C41.2 4.7 50 9.7 50 9.7c5.8 3.5 9.7 6.5 12.2 14.6l12.4 41.3c0.1 0.3-0.2 0.4-0.3 0.2 -3.7-3.9-12.5-8.6-12.5-8.6C58.1 55.4 52.4 50.9 50.2 43.8" />
    </symbol>
  </defs>
</svg>
<!-- URL copy box -->
<script>
  function copyEvent(id)
  {
      var str = document.getElementById(id);
      window.getSelection().selectAllChildren(str);
      document.execCommand("Copy")
  }
</script>
<!-- Overlay box box -->
<script>
  // https://john-dugan.com/javascript-debounce/
  var debounce=function(e,t,n){var a;return function(){var r=this,i=arguments,o=function(){a=null,n||e.apply(r,i)},s=n&&!a;clearTimeout(a),a=setTimeout(o,t||200),s&&e.apply(r,i)}};

  (function (window, d, debounce) {

    "use strict";

    // Modal pop-up window iframe version 4.1 22-08-2016

    // v4.1 - Launch from an anchor link, button or any other not recommended object
    // modal title text set by data-modalTitle, image alt or link text.
    // Object with .-modal (modalName) with have .-modal-open appended === "-" + modalName + contentClass

    // To do - under consideration:
    // make lightbox the modal section and code around it?
    // perhaps <section class=modal = lightbox
    //            <div =modal_inner = modal?
    // lightbox doesnt need to be in keychain just add onclick to close

    // To do:
    //    Option to set an ideal pop-up size eg an image
    //      - maintain the aspect ratio
    //      - centre it

    // Requires:
    //    SVG definitions for: #icon-cross, #icon-loading
    //    External functions: debounce()

    // Assumptions:
    //    First object in modal is the modal title
    //    Last object is the modal close link

    
    // defaults
    var modalName = "modal";
    var lightboxClass = "lightbox";
    var openClass = "-" + modalName + "-open";
    //var modalDesc = "<kbd>tab</kbd> or <kbd>shift + tab</kbd> to move focus.";
    var modalDesc = "Tab or Shift + Tab to move focus.";

    var _setContentObjs = function (isModalOpen) {
      var objs = d.getElementsByClassName("-" +modalName);
      var i = objs.length;
      while (i--) {
        if (!!isModalOpen) {
          objs[i].classList.add(openClass);
          if (objs[i].tagName.toLowerCase !== "body") {
            objs[i].setAttribute("aria-hidden", "true");
          }
        } else {
          objs[i].classList.remove(openClass);
          objs[i].removeAttribute("aria-hidden");
        }
      }
      return !!isModalOpen;
    };

    var _closeModal = function (e) {
      var count = e.target.count; // = lightbox, modal (ESC key), close btn
      var modalSection = d.getElementById(modalName + "_" + count);
      var lightbox = d.getElementById(modalName + "_" + count + "_" + lightboxClass);
      var modalLink;
      if (modalSection) {
        modalSection.setAttribute("aria-hidden", "true");
        lightbox.className = lightbox.className.replace(lightboxClass + "-on", "");

        _setContentObjs(!modalSection.getAttribute("aria-hidden"));
        modalLink = d.getElementById(modalSection.returnId);
        d.body.classList.remove(openClass);
        modalLink.focus();
      }
    };

    var _getModalSize = function (modalSection) {
      var clone = modalSection.cloneNode(true);
      var size = {};
      clone.className = modalName;
      clone.setAttribute("style", "position:fixed;visibility:hidden;transform: none");
      modalSection.parentElement.appendChild(clone);
      size.width = clone.clientWidth; // more performant than getBoundingClientRect
      size.height = clone.clientHeight; // more performant than getBoundingClientRect
      modalSection.parentElement.removeChild(clone);
      return size;
    };

    var _resizeIframes = function () {

      var size;
      var iframes;
      var ii;

      var modals = d.getElementsByClassName(modalName);
      var i = modals.length;

      while (i--) {

        size = _getModalSize(modals[i]);

        iframes = modals[i].getElementsByClassName(modalName + "_iframe");
        ii = iframes.length;

        while (ii--) {
          iframes[ii].width = size.width;
          iframes[ii].height = size.height;
        }
      }
    };

    var _addIframe = function (modalSection) {

      var size;
      var close_lnk;
      var frames = modalSection.getElementsByClassName(modalName + "_iframe");
      var iframe;
      if (!frames[0]) {

        iframe = d.createElement("iframe");

        // Don't display iframe until it's content is ready
        iframe.addEventListener("load", function () {
          iframe.classList.add(modalName + "_iframe-on");
        }, false);

        iframe.src = modalSection.modalSrc;
        iframe.className = modalName + "_iframe";

        size = _getModalSize(modalSection);
        iframe.width = size.width;
        iframe.height = size.height;

        iframe.setAttribute("frameborder", 0);
        iframe.setAttribute("allowfullscreen", true);

        // Add iframe before the close button
        close_lnk = d.getElementById(modalName + "_" + modalSection.count + "_lnk_close");
        modalSection.insertBefore(iframe, close_lnk);

      }
    };
    
    
    var _getTarget = function (obj) {
      var target = obj;
      var isBodyTag = obj.tagName.toLowerCase() === "body";
      if (isBodyTag) {
        return false;
      }
      if (!obj.modalSrc) {
        target = _getTarget(obj.parentElement);
      }
      return target;
    }

    var _openModal = function (e) {

      e.preventDefault();
      
      var target = _getTarget(e.target);
      
      if (target) {

        var count = target.count;
        var tempId = modalName + "_" + count;
        var tempLightboxClass = modalName + "_" + lightboxClass;
        var modalSection = d.getElementById(tempId);
        var lightbox = d.getElementById(tempId + "_" + lightboxClass);

        if (modalSection && lightbox) {
          if (!lightbox.className.match(tempLightboxClass + "-on")) {
            lightbox.className += " " + tempLightboxClass + "-on";
          }
          modalSection.setAttribute("aria-hidden", "false");
          _addIframe(modalSection);

          _setContentObjs(!!modalSection.getAttribute("aria-hidden"));

          d.body.classList.add(openClass);
          d.getElementById(modalName + "_" + count + "_title").focus();
        }
      }
    };

    var _keydown_openerObj = function (e) {
      // enter or space from the opener object
      if (e.which === 13 || e.which === 32) {
          e.preventDefault(); 
          _openModal(e);
      }
    };

    var _addOpenModalLinkAttr = function (modalLink) {
      modalLink.id = modalLink.id || "modal_" + modalLink.count + "_lnk";
      modalLink.setAttribute("aria-controls", modalName + "_" + modalLink.count);
      
      // test if it's not a button
      var tag = modalLink.tagName.toLowerCase();
      if (tag !== "button") {
        modalLink.setAttribute("aria-role", "button");
        modalLink.addEventListener("keydown", _keydown_openerObj, false);
      }
      
      // click only requires space and enter activtion too
      if (tag !== "a" || "button") {
        modalLink.tabIndex = 0;
      }
      
      modalLink.addEventListener("click", _openModal, false);
    };

    var _keydown_modal = function (e) {

      var target = e.target;

      // ESC key on anything actionable
      if (e.which === 27) {
        _closeModal(e);
      }

      // tab key and shift on the h1
      if (e.which === 9 && e.shiftKey) {
        if (target.classList.contains(modalName + "_title")) {
          e.preventDefault();
          //focus on last object in modal (close btn)
          d.getElementById(modalName + "_" + e.target.count + "_lnk_close").focus();
        }
      }

      // tab key and not shift on the close link.
      if (e.which === 9 && !e.shiftKey) {
        if (target.classList.contains(modalName + "_lnk-close")) {
          e.preventDefault(); 
          //focus on first object in modal - or should it be the modal? Requires testing
          d.getElementById(modalName + "_" + e.target.count + "_title").focus();
        }
      }

      // enter or space on the close link - why again??
      if (e.which === 13 || e.which === 32) {
        if (target.classList.contains(modalName + "_lnk-close")) {
          e.preventDefault(); 
          _closeModal(e);
        }
      }
    };

    var _getTitleText = function (modalLink) {
      var alt = "";
      var imgs = modalLink.getElementsByTagName("img");
      if (imgs && imgs[0]) {
        alt = imgs[0].alt;
      }
      return modalLink.getAttribute("data-modalTitle") || alt || modalLink.textContent; 
    };

    var _getModalTitle = function (modalLink) {
      var title = d.createElement("h1");
      title.id = modalName + "_" + modalLink.count + "_title";
      title.className = modalName + "_title";
      title.tabIndex = 0;
      title.textContent = _getTitleText(modalLink);
      title.count = modalLink.count;
      title.addEventListener("keydown", _keydown_modal, false);
      return title;
    };

    var _getModalSVG = function (icon, clss, title) {
      var svg = d.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.classList.add(clss);
      if (title) {
        var t = d.createElementNS("http://www.w3.org/2000/svg", "title");
        t.textContent = title;
        svg.appendChild(t);
      }
      var use = d.createElementNS("http://www.w3.org/2000/svg", "use");
      use.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + icon);
      svg.appendChild(use);
      return svg;
    };

    var _getModalDesc = function (modalLink) {
      var desc = d.createElement("p");
      desc.id = modalName + "_" + modalLink.count + "_desc";
      desc.className = modalName + "_desc";
      desc.tabIndex = 0;
      desc.innerHTML = modalLink.getAttribute("data-modalDesc") || modalDesc;
      desc.count = modalLink.count;
      desc.addEventListener("keydown", _keydown_modal, false);
      return desc;
    };

    var _getModalCloseLink = function (modalLink) {
      var link = d.createElement("a");
      link.id = modalName + "_" + modalLink.count + "_lnk_close";
      link.className = modalName + "_lnk-close";
      link.tabIndex = 0;
      link.appendChild(_getModalSVG("icon-cross", "svg-close", "Close modal"));
      link.count = modalLink.count;
      link.addEventListener("click", _closeModal, false);
      link.addEventListener("keydown", _keydown_modal, false);
      return link;
    };

    var _addModalSection = function(modalLink) {
      var section = d.createElement("section");
      section.id = modalName + "_" + modalLink.count;
      section.count = modalLink.count;
      section.returnId = modalLink.id;
      section.className = modalName;
      section.setAttribute("aria-hidden", "true");

      // should be on the activating link?
      section.setAttribute("aria-labelledby", modalName +"_" + modalLink.count + "_title");
      section.setAttribute("aria-describedby", modalName +"_" + modalLink.count + "_desc");

      section.setAttribute("role", "dialog");
      section.modalSrc = modalLink.modalSrc;

      section.appendChild(_getModalTitle(modalLink));
      //section.appendChild(_getModalSVG("icon-loading", "svg-loading", "Loading"));
      //section.appendChild(_getModalSVG("icon-loading", "svg-loading2", ""));
      section.appendChild(_getModalDesc(modalLink));
      section.appendChild(_getModalCloseLink(modalLink));

      d.body.appendChild(section);
    };

    var _addLightbox = function (modalLink) {

      var count = modalLink.count;
      var lightboxDiv = d.createElement("div");

      lightboxDiv.id = modalName + "_" + count + "_" + lightboxClass;
      lightboxDiv.className = modalName + "_" + lightboxClass;
      lightboxDiv.count = count;
      lightboxDiv.returnId = modalLink.id;

      // mouse / touch only
      lightboxDiv.addEventListener("click", _closeModal, false);

      d.body.appendChild(lightboxDiv);
    };

    var configuration = function (cfg) {
      modalName = cfg.modalName || modalName;
      
      lightboxClass = cfg.lightboxClass || lightboxClass;
      
      // any object with a class -modal will have the class -modal-open added when the modal is open.
      //openClass = "-" + modalName + (cfg.openClass || "-open");
      openClass = cfg.openClass ? "-" + modalName + cfg.openClass : openClass;
    };

    var initialise = function (cfg) {

      configuration(cfg);

      var modalSrc;
      var dataModals = d.querySelectorAll("[data-" + modalName + "]");

      if (dataModals) {
        var i = dataModals.length;
        while (i--) {

          // Link href and iframe src are not always the same!
          modalSrc = false;

          // use the href
          if (dataModals[i].hasAttribute("href")) {
            modalSrc = dataModals[i].href;
          }

          // overwrite src with data-modal content when available
          if (dataModals[i].getAttribute("data-modal").length) {
            modalSrc = dataModals[i].getAttribute("data-modal");
          }

          if (modalSrc) {
            dataModals[i].modalSrc = modalSrc;
            dataModals[i].count = i;
            _addOpenModalLinkAttr(dataModals[i]);
            _addModalSection(dataModals[i]);
            _addLightbox(dataModals[i]);
          }

        }

        window.addEventListener("resize", debounce(_resizeIframes, 250, false));

      }

    };

    initialise({
      modalName : "modal",  // class name of modal, also used as the base for all classes used except on SVGs.
      openClass : "-open", // is default ("-" + modaName automatically prepended)
      lightboxClass : "lightbox" // is default (modaName + "_" automatically prepended)
    });

  }(window, document, debounce));
</script>
